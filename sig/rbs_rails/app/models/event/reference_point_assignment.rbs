class Event < ::ApplicationRecord
  class ReferencePointAssignment < ::ApplicationRecord
    extend _ActiveRecord_Relation_ClassMethods[Event::ReferencePointAssignment, ActiveRecord_Relation, Integer]

    module GeneratedAttributeMethods
      def id: () -> Integer

      def id=: (Integer) -> Integer

      def id?: () -> bool

      def id_changed?: () -> bool

      def id_change: () -> [ Integer?, Integer? ]

      def id_will_change!: () -> void

      def id_was: () -> Integer?

      def id_previously_changed?: () -> bool

      def id_previous_change: () -> Array[Integer?]?

      def id_previously_was: () -> Integer?

      def id_before_last_save: () -> Integer?

      def id_change_to_be_saved: () -> Array[Integer?]?

      def id_in_database: () -> Integer?

      def saved_change_to_id: () -> Array[Integer?]?

      def saved_change_to_id?: () -> bool

      def will_save_change_to_id?: () -> bool

      def restore_id!: () -> void

      def clear_id_change: () -> void

      def round_id: () -> Integer?

      def round_id=: (Integer?) -> Integer?

      def round_id?: () -> bool

      def round_id_changed?: () -> bool

      def round_id_change: () -> [ Integer?, Integer? ]

      def round_id_will_change!: () -> void

      def round_id_was: () -> Integer?

      def round_id_previously_changed?: () -> bool

      def round_id_previous_change: () -> Array[Integer?]?

      def round_id_previously_was: () -> Integer?

      def round_id_before_last_save: () -> Integer?

      def round_id_change_to_be_saved: () -> Array[Integer?]?

      def round_id_in_database: () -> Integer?

      def saved_change_to_round_id: () -> Array[Integer?]?

      def saved_change_to_round_id?: () -> bool

      def will_save_change_to_round_id?: () -> bool

      def restore_round_id!: () -> void

      def clear_round_id_change: () -> void

      def competitor_id: () -> Integer?

      def competitor_id=: (Integer?) -> Integer?

      def competitor_id?: () -> bool

      def competitor_id_changed?: () -> bool

      def competitor_id_change: () -> [ Integer?, Integer? ]

      def competitor_id_will_change!: () -> void

      def competitor_id_was: () -> Integer?

      def competitor_id_previously_changed?: () -> bool

      def competitor_id_previous_change: () -> Array[Integer?]?

      def competitor_id_previously_was: () -> Integer?

      def competitor_id_before_last_save: () -> Integer?

      def competitor_id_change_to_be_saved: () -> Array[Integer?]?

      def competitor_id_in_database: () -> Integer?

      def saved_change_to_competitor_id: () -> Array[Integer?]?

      def saved_change_to_competitor_id?: () -> bool

      def will_save_change_to_competitor_id?: () -> bool

      def restore_competitor_id!: () -> void

      def clear_competitor_id_change: () -> void

      def reference_point_id: () -> Integer?

      def reference_point_id=: (Integer?) -> Integer?

      def reference_point_id?: () -> bool

      def reference_point_id_changed?: () -> bool

      def reference_point_id_change: () -> [ Integer?, Integer? ]

      def reference_point_id_will_change!: () -> void

      def reference_point_id_was: () -> Integer?

      def reference_point_id_previously_changed?: () -> bool

      def reference_point_id_previous_change: () -> Array[Integer?]?

      def reference_point_id_previously_was: () -> Integer?

      def reference_point_id_before_last_save: () -> Integer?

      def reference_point_id_change_to_be_saved: () -> Array[Integer?]?

      def reference_point_id_in_database: () -> Integer?

      def saved_change_to_reference_point_id: () -> Array[Integer?]?

      def saved_change_to_reference_point_id?: () -> bool

      def will_save_change_to_reference_point_id?: () -> bool

      def restore_reference_point_id!: () -> void

      def clear_reference_point_id_change: () -> void

      def created_at: () -> ActiveSupport::TimeWithZone

      def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def created_at?: () -> bool

      def created_at_changed?: () -> bool

      def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def created_at_will_change!: () -> void

      def created_at_was: () -> ActiveSupport::TimeWithZone?

      def created_at_previously_changed?: () -> bool

      def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_created_at?: () -> bool

      def will_save_change_to_created_at?: () -> bool

      def restore_created_at!: () -> void

      def clear_created_at_change: () -> void

      def updated_at: () -> ActiveSupport::TimeWithZone

      def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def updated_at?: () -> bool

      def updated_at_changed?: () -> bool

      def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def updated_at_will_change!: () -> void

      def updated_at_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_previously_changed?: () -> bool

      def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_updated_at?: () -> bool

      def will_save_change_to_updated_at?: () -> bool

      def restore_updated_at!: () -> void

      def clear_updated_at_change: () -> void
    end
    include GeneratedAttributeMethods

    def round: () -> Event::Round
    def round=: (Event::Round?) -> Event::Round?
    def reload_round: () -> Event::Round?
    def build_round: (untyped) -> Event::Round
    def create_round: (untyped) -> Event::Round
    def create_round!: (untyped) -> Event::Round
    def competitor: () -> Event::Competitor
    def competitor=: (Event::Competitor?) -> Event::Competitor?
    def reload_competitor: () -> Event::Competitor?
    def build_competitor: (untyped) -> Event::Competitor
    def create_competitor: (untyped) -> Event::Competitor
    def create_competitor!: (untyped) -> Event::Competitor
    def reference_point: () -> Event::ReferencePoint
    def reference_point=: (Event::ReferencePoint?) -> Event::ReferencePoint?
    def reload_reference_point: () -> Event::ReferencePoint?
    def build_reference_point: (untyped) -> Event::ReferencePoint
    def create_reference_point: (untyped) -> Event::ReferencePoint
    def create_reference_point!: (untyped) -> Event::ReferencePoint

    module GeneratedRelationMethods
    end

    class ActiveRecord_Relation < ::ActiveRecord::Relation
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[Event::ReferencePointAssignment, Integer]
      include Enumerable[Event::ReferencePointAssignment]
    end

    class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[Event::ReferencePointAssignment, Integer]
    end
  end
end

class Contribution < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Contribution, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def amount: () -> BigDecimal?

    def amount=: (BigDecimal?) -> BigDecimal?

    def amount?: () -> bool

    def amount_changed?: () -> bool

    def amount_change: () -> [ BigDecimal?, BigDecimal? ]

    def amount_will_change!: () -> void

    def amount_was: () -> BigDecimal?

    def amount_previously_changed?: () -> bool

    def amount_previous_change: () -> Array[BigDecimal?]?

    def amount_previously_was: () -> BigDecimal?

    def amount_before_last_save: () -> BigDecimal?

    def amount_change_to_be_saved: () -> Array[BigDecimal?]?

    def amount_in_database: () -> BigDecimal?

    def saved_change_to_amount: () -> Array[BigDecimal?]?

    def saved_change_to_amount?: () -> bool

    def will_save_change_to_amount?: () -> bool

    def restore_amount!: () -> void

    def clear_amount_change: () -> void

    def received_at: () -> Date?

    def received_at=: (Date?) -> Date?

    def received_at?: () -> bool

    def received_at_changed?: () -> bool

    def received_at_change: () -> [ Date?, Date? ]

    def received_at_will_change!: () -> void

    def received_at_was: () -> Date?

    def received_at_previously_changed?: () -> bool

    def received_at_previous_change: () -> Array[Date?]?

    def received_at_previously_was: () -> Date?

    def received_at_before_last_save: () -> Date?

    def received_at_change_to_be_saved: () -> Array[Date?]?

    def received_at_in_database: () -> Date?

    def saved_change_to_received_at: () -> Array[Date?]?

    def saved_change_to_received_at?: () -> bool

    def will_save_change_to_received_at?: () -> bool

    def restore_received_at!: () -> void

    def clear_received_at_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods
  def details: () -> Contribution::Detail::ActiveRecord_Associations_CollectionProxy
  def details=: (Contribution::Detail::ActiveRecord_Associations_CollectionProxy | Array[Contribution::Detail]) -> (Contribution::Detail::ActiveRecord_Associations_CollectionProxy | Array[Contribution::Detail])
  def detail_ids: () -> Array[Integer]
  def detail_ids=: (Array[Integer]) -> Array[Integer]

  def self.in_this_month: () -> ActiveRecord_Relation
  def self.in_past_days: (untyped days) -> ActiveRecord_Relation
  def self.chronologically: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def in_this_month: () -> ActiveRecord_Relation

    def in_past_days: (untyped days) -> ActiveRecord_Relation

    def chronologically: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Contribution, Integer]
    include Enumerable[Contribution]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Contribution, Integer]
  end
end

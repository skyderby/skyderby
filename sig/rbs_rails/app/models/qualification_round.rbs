class QualificationRound < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[QualificationRound, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def tournament_id: () -> Integer?

    def tournament_id=: (Integer?) -> Integer?

    def tournament_id?: () -> bool

    def tournament_id_changed?: () -> bool

    def tournament_id_change: () -> [ Integer?, Integer? ]

    def tournament_id_will_change!: () -> void

    def tournament_id_was: () -> Integer?

    def tournament_id_previously_changed?: () -> bool

    def tournament_id_previous_change: () -> Array[Integer?]?

    def tournament_id_previously_was: () -> Integer?

    def tournament_id_before_last_save: () -> Integer?

    def tournament_id_change_to_be_saved: () -> Array[Integer?]?

    def tournament_id_in_database: () -> Integer?

    def saved_change_to_tournament_id: () -> Array[Integer?]?

    def saved_change_to_tournament_id?: () -> bool

    def will_save_change_to_tournament_id?: () -> bool

    def restore_tournament_id!: () -> void

    def clear_tournament_id_change: () -> void

    def order: () -> Integer?

    def order=: (Integer?) -> Integer?

    def order?: () -> bool

    def order_changed?: () -> bool

    def order_change: () -> [ Integer?, Integer? ]

    def order_will_change!: () -> void

    def order_was: () -> Integer?

    def order_previously_changed?: () -> bool

    def order_previous_change: () -> Array[Integer?]?

    def order_previously_was: () -> Integer?

    def order_before_last_save: () -> Integer?

    def order_change_to_be_saved: () -> Array[Integer?]?

    def order_in_database: () -> Integer?

    def saved_change_to_order: () -> Array[Integer?]?

    def saved_change_to_order?: () -> bool

    def will_save_change_to_order?: () -> bool

    def restore_order!: () -> void

    def clear_order_change: () -> void

    def created_at: () -> untyped

    def created_at=: (untyped) -> untyped

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ untyped?, untyped? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> untyped?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[untyped?]?

    def created_at_previously_was: () -> untyped?

    def created_at_before_last_save: () -> untyped?

    def created_at_change_to_be_saved: () -> Array[untyped?]?

    def created_at_in_database: () -> untyped?

    def saved_change_to_created_at: () -> Array[untyped?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> untyped

    def updated_at=: (untyped) -> untyped

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ untyped?, untyped? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> untyped?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[untyped?]?

    def updated_at_previously_was: () -> untyped?

    def updated_at_before_last_save: () -> untyped?

    def updated_at_change_to_be_saved: () -> Array[untyped?]?

    def updated_at_in_database: () -> untyped?

    def saved_change_to_updated_at: () -> Array[untyped?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods
  def qualification_jumps: () -> QualificationJump::ActiveRecord_Associations_CollectionProxy
  def qualification_jumps=: (QualificationJump::ActiveRecord_Associations_CollectionProxy | Array[QualificationJump]) -> (QualificationJump::ActiveRecord_Associations_CollectionProxy | Array[QualificationJump])
  def qualification_jump_ids: () -> Array[Integer]
  def qualification_jump_ids=: (Array[Integer]) -> Array[Integer]

  def tournament: () -> Tournament
  def tournament=: (Tournament?) -> Tournament?
  def reload_tournament: () -> Tournament?
  def build_tournament: (untyped) -> Tournament
  def create_tournament: (untyped) -> Tournament
  def create_tournament!: (untyped) -> Tournament

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[QualificationRound, Integer]
    include Enumerable[QualificationRound]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[QualificationRound, Integer]
  end
end

class SpeedSkydivingCompetition < ::ApplicationRecord
  class Result < ::ApplicationRecord
    extend _ActiveRecord_Relation_ClassMethods[SpeedSkydivingCompetition::Result, ActiveRecord_Relation, Integer]

    module GeneratedAttributeMethods
      def id: () -> Integer

      def id=: (Integer) -> Integer

      def id?: () -> bool

      def id_changed?: () -> bool

      def id_change: () -> [ Integer?, Integer? ]

      def id_will_change!: () -> void

      def id_was: () -> Integer?

      def id_previously_changed?: () -> bool

      def id_previous_change: () -> Array[Integer?]?

      def id_previously_was: () -> Integer?

      def id_before_last_save: () -> Integer?

      def id_change_to_be_saved: () -> Array[Integer?]?

      def id_in_database: () -> Integer?

      def saved_change_to_id: () -> Array[Integer?]?

      def saved_change_to_id?: () -> bool

      def will_save_change_to_id?: () -> bool

      def restore_id!: () -> void

      def clear_id_change: () -> void

      def event_id: () -> Integer?

      def event_id=: (Integer?) -> Integer?

      def event_id?: () -> bool

      def event_id_changed?: () -> bool

      def event_id_change: () -> [ Integer?, Integer? ]

      def event_id_will_change!: () -> void

      def event_id_was: () -> Integer?

      def event_id_previously_changed?: () -> bool

      def event_id_previous_change: () -> Array[Integer?]?

      def event_id_previously_was: () -> Integer?

      def event_id_before_last_save: () -> Integer?

      def event_id_change_to_be_saved: () -> Array[Integer?]?

      def event_id_in_database: () -> Integer?

      def saved_change_to_event_id: () -> Array[Integer?]?

      def saved_change_to_event_id?: () -> bool

      def will_save_change_to_event_id?: () -> bool

      def restore_event_id!: () -> void

      def clear_event_id_change: () -> void

      def round_id: () -> Integer?

      def round_id=: (Integer?) -> Integer?

      def round_id?: () -> bool

      def round_id_changed?: () -> bool

      def round_id_change: () -> [ Integer?, Integer? ]

      def round_id_will_change!: () -> void

      def round_id_was: () -> Integer?

      def round_id_previously_changed?: () -> bool

      def round_id_previous_change: () -> Array[Integer?]?

      def round_id_previously_was: () -> Integer?

      def round_id_before_last_save: () -> Integer?

      def round_id_change_to_be_saved: () -> Array[Integer?]?

      def round_id_in_database: () -> Integer?

      def saved_change_to_round_id: () -> Array[Integer?]?

      def saved_change_to_round_id?: () -> bool

      def will_save_change_to_round_id?: () -> bool

      def restore_round_id!: () -> void

      def clear_round_id_change: () -> void

      def competitor_id: () -> Integer?

      def competitor_id=: (Integer?) -> Integer?

      def competitor_id?: () -> bool

      def competitor_id_changed?: () -> bool

      def competitor_id_change: () -> [ Integer?, Integer? ]

      def competitor_id_will_change!: () -> void

      def competitor_id_was: () -> Integer?

      def competitor_id_previously_changed?: () -> bool

      def competitor_id_previous_change: () -> Array[Integer?]?

      def competitor_id_previously_was: () -> Integer?

      def competitor_id_before_last_save: () -> Integer?

      def competitor_id_change_to_be_saved: () -> Array[Integer?]?

      def competitor_id_in_database: () -> Integer?

      def saved_change_to_competitor_id: () -> Array[Integer?]?

      def saved_change_to_competitor_id?: () -> bool

      def will_save_change_to_competitor_id?: () -> bool

      def restore_competitor_id!: () -> void

      def clear_competitor_id_change: () -> void

      def track_id: () -> Integer?

      def track_id=: (Integer?) -> Integer?

      def track_id?: () -> bool

      def track_id_changed?: () -> bool

      def track_id_change: () -> [ Integer?, Integer? ]

      def track_id_will_change!: () -> void

      def track_id_was: () -> Integer?

      def track_id_previously_changed?: () -> bool

      def track_id_previous_change: () -> Array[Integer?]?

      def track_id_previously_was: () -> Integer?

      def track_id_before_last_save: () -> Integer?

      def track_id_change_to_be_saved: () -> Array[Integer?]?

      def track_id_in_database: () -> Integer?

      def saved_change_to_track_id: () -> Array[Integer?]?

      def saved_change_to_track_id?: () -> bool

      def will_save_change_to_track_id?: () -> bool

      def restore_track_id!: () -> void

      def clear_track_id_change: () -> void

      def result: () -> BigDecimal?

      def result=: (BigDecimal?) -> BigDecimal?

      def result?: () -> bool

      def result_changed?: () -> bool

      def result_change: () -> [ BigDecimal?, BigDecimal? ]

      def result_will_change!: () -> void

      def result_was: () -> BigDecimal?

      def result_previously_changed?: () -> bool

      def result_previous_change: () -> Array[BigDecimal?]?

      def result_previously_was: () -> BigDecimal?

      def result_before_last_save: () -> BigDecimal?

      def result_change_to_be_saved: () -> Array[BigDecimal?]?

      def result_in_database: () -> BigDecimal?

      def saved_change_to_result: () -> Array[BigDecimal?]?

      def saved_change_to_result?: () -> bool

      def will_save_change_to_result?: () -> bool

      def restore_result!: () -> void

      def clear_result_change: () -> void

      def created_at: () -> ActiveSupport::TimeWithZone

      def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def created_at?: () -> bool

      def created_at_changed?: () -> bool

      def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def created_at_will_change!: () -> void

      def created_at_was: () -> ActiveSupport::TimeWithZone?

      def created_at_previously_changed?: () -> bool

      def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_created_at?: () -> bool

      def will_save_change_to_created_at?: () -> bool

      def restore_created_at!: () -> void

      def clear_created_at_change: () -> void

      def updated_at: () -> ActiveSupport::TimeWithZone

      def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def updated_at?: () -> bool

      def updated_at_changed?: () -> bool

      def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def updated_at_will_change!: () -> void

      def updated_at_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_previously_changed?: () -> bool

      def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_updated_at?: () -> bool

      def will_save_change_to_updated_at?: () -> bool

      def restore_updated_at!: () -> void

      def clear_updated_at_change: () -> void

      def window_start_time: () -> ActiveSupport::TimeWithZone?

      def window_start_time=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

      def window_start_time?: () -> bool

      def window_start_time_changed?: () -> bool

      def window_start_time_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def window_start_time_will_change!: () -> void

      def window_start_time_was: () -> ActiveSupport::TimeWithZone?

      def window_start_time_previously_changed?: () -> bool

      def window_start_time_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def window_start_time_previously_was: () -> ActiveSupport::TimeWithZone?

      def window_start_time_before_last_save: () -> ActiveSupport::TimeWithZone?

      def window_start_time_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def window_start_time_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_window_start_time: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_window_start_time?: () -> bool

      def will_save_change_to_window_start_time?: () -> bool

      def restore_window_start_time!: () -> void

      def clear_window_start_time_change: () -> void

      def window_end_time: () -> ActiveSupport::TimeWithZone?

      def window_end_time=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

      def window_end_time?: () -> bool

      def window_end_time_changed?: () -> bool

      def window_end_time_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def window_end_time_will_change!: () -> void

      def window_end_time_was: () -> ActiveSupport::TimeWithZone?

      def window_end_time_previously_changed?: () -> bool

      def window_end_time_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def window_end_time_previously_was: () -> ActiveSupport::TimeWithZone?

      def window_end_time_before_last_save: () -> ActiveSupport::TimeWithZone?

      def window_end_time_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def window_end_time_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_window_end_time: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_window_end_time?: () -> bool

      def will_save_change_to_window_end_time?: () -> bool

      def restore_window_end_time!: () -> void

      def clear_window_end_time_change: () -> void

      def exit_altitude: () -> Float?

      def exit_altitude=: (Float?) -> Float?

      def exit_altitude?: () -> bool

      def exit_altitude_changed?: () -> bool

      def exit_altitude_change: () -> [ Float?, Float? ]

      def exit_altitude_will_change!: () -> void

      def exit_altitude_was: () -> Float?

      def exit_altitude_previously_changed?: () -> bool

      def exit_altitude_previous_change: () -> Array[Float?]?

      def exit_altitude_previously_was: () -> Float?

      def exit_altitude_before_last_save: () -> Float?

      def exit_altitude_change_to_be_saved: () -> Array[Float?]?

      def exit_altitude_in_database: () -> Float?

      def saved_change_to_exit_altitude: () -> Array[Float?]?

      def saved_change_to_exit_altitude?: () -> bool

      def will_save_change_to_exit_altitude?: () -> bool

      def restore_exit_altitude!: () -> void

      def clear_exit_altitude_change: () -> void
    end
    include GeneratedAttributeMethods
    def penalties: () -> SpeedSkydivingCompetition::Result::Penalty::ActiveRecord_Associations_CollectionProxy
    def penalties=: (SpeedSkydivingCompetition::Result::Penalty::ActiveRecord_Associations_CollectionProxy | Array[SpeedSkydivingCompetition::Result::Penalty]) -> (SpeedSkydivingCompetition::Result::Penalty::ActiveRecord_Associations_CollectionProxy | Array[SpeedSkydivingCompetition::Result::Penalty])
    def penalty_ids: () -> Array[Integer]
    def penalty_ids=: (Array[Integer]) -> Array[Integer]

    def event: () -> SpeedSkydivingCompetition
    def event=: (SpeedSkydivingCompetition?) -> SpeedSkydivingCompetition?
    def reload_event: () -> SpeedSkydivingCompetition?
    def build_event: (untyped) -> SpeedSkydivingCompetition
    def create_event: (untyped) -> SpeedSkydivingCompetition
    def create_event!: (untyped) -> SpeedSkydivingCompetition
    def competitor: () -> SpeedSkydivingCompetition::Competitor
    def competitor=: (SpeedSkydivingCompetition::Competitor?) -> SpeedSkydivingCompetition::Competitor?
    def reload_competitor: () -> SpeedSkydivingCompetition::Competitor?
    def build_competitor: (untyped) -> SpeedSkydivingCompetition::Competitor
    def create_competitor: (untyped) -> SpeedSkydivingCompetition::Competitor
    def create_competitor!: (untyped) -> SpeedSkydivingCompetition::Competitor
    def round: () -> SpeedSkydivingCompetition::Round
    def round=: (SpeedSkydivingCompetition::Round?) -> SpeedSkydivingCompetition::Round?
    def reload_round: () -> SpeedSkydivingCompetition::Round?
    def build_round: (untyped) -> SpeedSkydivingCompetition::Round
    def create_round: (untyped) -> SpeedSkydivingCompetition::Round
    def create_round!: (untyped) -> SpeedSkydivingCompetition::Round
    def track: () -> Track
    def track=: (Track?) -> Track?
    def reload_track: () -> Track?
    def build_track: (untyped) -> Track
    def create_track: (untyped) -> Track
    def create_track!: (untyped) -> Track

    module GeneratedRelationMethods
    end

    class ActiveRecord_Relation < ::ActiveRecord::Relation
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[SpeedSkydivingCompetition::Result, Integer]
      include Enumerable[SpeedSkydivingCompetition::Result]
    end

    class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[SpeedSkydivingCompetition::Result, Integer]
    end
  end
end

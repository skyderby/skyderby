class SpeedSkydivingCompetition < ::ApplicationRecord
  class Round < ::ApplicationRecord
    extend _ActiveRecord_Relation_ClassMethods[SpeedSkydivingCompetition::Round, ActiveRecord_Relation, Integer]

    module GeneratedAttributeMethods
      def id: () -> Integer

      def id=: (Integer) -> Integer

      def id?: () -> bool

      def id_changed?: () -> bool

      def id_change: () -> [ Integer?, Integer? ]

      def id_will_change!: () -> void

      def id_was: () -> Integer?

      def id_previously_changed?: () -> bool

      def id_previous_change: () -> Array[Integer?]?

      def id_previously_was: () -> Integer?

      def id_before_last_save: () -> Integer?

      def id_change_to_be_saved: () -> Array[Integer?]?

      def id_in_database: () -> Integer?

      def saved_change_to_id: () -> Array[Integer?]?

      def saved_change_to_id?: () -> bool

      def will_save_change_to_id?: () -> bool

      def restore_id!: () -> void

      def clear_id_change: () -> void

      def number: () -> Integer

      def number=: (Integer) -> Integer

      def number?: () -> bool

      def number_changed?: () -> bool

      def number_change: () -> [ Integer?, Integer? ]

      def number_will_change!: () -> void

      def number_was: () -> Integer?

      def number_previously_changed?: () -> bool

      def number_previous_change: () -> Array[Integer?]?

      def number_previously_was: () -> Integer?

      def number_before_last_save: () -> Integer?

      def number_change_to_be_saved: () -> Array[Integer?]?

      def number_in_database: () -> Integer?

      def saved_change_to_number: () -> Array[Integer?]?

      def saved_change_to_number?: () -> bool

      def will_save_change_to_number?: () -> bool

      def restore_number!: () -> void

      def clear_number_change: () -> void

      def event_id: () -> Integer?

      def event_id=: (Integer?) -> Integer?

      def event_id?: () -> bool

      def event_id_changed?: () -> bool

      def event_id_change: () -> [ Integer?, Integer? ]

      def event_id_will_change!: () -> void

      def event_id_was: () -> Integer?

      def event_id_previously_changed?: () -> bool

      def event_id_previous_change: () -> Array[Integer?]?

      def event_id_previously_was: () -> Integer?

      def event_id_before_last_save: () -> Integer?

      def event_id_change_to_be_saved: () -> Array[Integer?]?

      def event_id_in_database: () -> Integer?

      def saved_change_to_event_id: () -> Array[Integer?]?

      def saved_change_to_event_id?: () -> bool

      def will_save_change_to_event_id?: () -> bool

      def restore_event_id!: () -> void

      def clear_event_id_change: () -> void

      def created_at: () -> ActiveSupport::TimeWithZone

      def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def created_at?: () -> bool

      def created_at_changed?: () -> bool

      def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def created_at_will_change!: () -> void

      def created_at_was: () -> ActiveSupport::TimeWithZone?

      def created_at_previously_changed?: () -> bool

      def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def created_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_created_at?: () -> bool

      def will_save_change_to_created_at?: () -> bool

      def restore_created_at!: () -> void

      def clear_created_at_change: () -> void

      def updated_at: () -> ActiveSupport::TimeWithZone

      def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

      def updated_at?: () -> bool

      def updated_at_changed?: () -> bool

      def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def updated_at_will_change!: () -> void

      def updated_at_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_previously_changed?: () -> bool

      def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_updated_at?: () -> bool

      def will_save_change_to_updated_at?: () -> bool

      def restore_updated_at!: () -> void

      def clear_updated_at_change: () -> void

      def completed_at: () -> ActiveSupport::TimeWithZone?

      def completed_at=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

      def completed_at?: () -> bool

      def completed_at_changed?: () -> bool

      def completed_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

      def completed_at_will_change!: () -> void

      def completed_at_was: () -> ActiveSupport::TimeWithZone?

      def completed_at_previously_changed?: () -> bool

      def completed_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

      def completed_at_previously_was: () -> ActiveSupport::TimeWithZone?

      def completed_at_before_last_save: () -> ActiveSupport::TimeWithZone?

      def completed_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

      def completed_at_in_database: () -> ActiveSupport::TimeWithZone?

      def saved_change_to_completed_at: () -> Array[ActiveSupport::TimeWithZone?]?

      def saved_change_to_completed_at?: () -> bool

      def will_save_change_to_completed_at?: () -> bool

      def restore_completed_at!: () -> void

      def clear_completed_at_change: () -> void
    end
    include GeneratedAttributeMethods

    def event: () -> SpeedSkydivingCompetition
    def event=: (SpeedSkydivingCompetition?) -> SpeedSkydivingCompetition?
    def reload_event: () -> SpeedSkydivingCompetition?
    def build_event: (untyped) -> SpeedSkydivingCompetition
    def create_event: (untyped) -> SpeedSkydivingCompetition
    def create_event!: (untyped) -> SpeedSkydivingCompetition

    def self.ordered: () -> ActiveRecord_Relation

    module GeneratedRelationMethods
      def ordered: () -> ActiveRecord_Relation
    end

    class ActiveRecord_Relation < ::ActiveRecord::Relation
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[SpeedSkydivingCompetition::Round, Integer]
      include Enumerable[SpeedSkydivingCompetition::Round]
    end

    class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[SpeedSkydivingCompetition::Round, Integer]
    end
  end
end

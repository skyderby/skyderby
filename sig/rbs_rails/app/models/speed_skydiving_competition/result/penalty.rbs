class SpeedSkydivingCompetition < ::ApplicationRecord
  class Result < ::ApplicationRecord
    class Penalty < ::ApplicationRecord
      extend _ActiveRecord_Relation_ClassMethods[SpeedSkydivingCompetition::Result::Penalty, ActiveRecord_Relation, Integer]

      module GeneratedAttributeMethods
        def id: () -> Integer

        def id=: (Integer) -> Integer

        def id?: () -> bool

        def id_changed?: () -> bool

        def id_change: () -> [ Integer?, Integer? ]

        def id_will_change!: () -> void

        def id_was: () -> Integer?

        def id_previously_changed?: () -> bool

        def id_previous_change: () -> Array[Integer?]?

        def id_previously_was: () -> Integer?

        def id_before_last_save: () -> Integer?

        def id_change_to_be_saved: () -> Array[Integer?]?

        def id_in_database: () -> Integer?

        def saved_change_to_id: () -> Array[Integer?]?

        def saved_change_to_id?: () -> bool

        def will_save_change_to_id?: () -> bool

        def restore_id!: () -> void

        def clear_id_change: () -> void

        def result_id: () -> Integer?

        def result_id=: (Integer?) -> Integer?

        def result_id?: () -> bool

        def result_id_changed?: () -> bool

        def result_id_change: () -> [ Integer?, Integer? ]

        def result_id_will_change!: () -> void

        def result_id_was: () -> Integer?

        def result_id_previously_changed?: () -> bool

        def result_id_previous_change: () -> Array[Integer?]?

        def result_id_previously_was: () -> Integer?

        def result_id_before_last_save: () -> Integer?

        def result_id_change_to_be_saved: () -> Array[Integer?]?

        def result_id_in_database: () -> Integer?

        def saved_change_to_result_id: () -> Array[Integer?]?

        def saved_change_to_result_id?: () -> bool

        def will_save_change_to_result_id?: () -> bool

        def restore_result_id!: () -> void

        def clear_result_id_change: () -> void

        def percent: () -> Integer?

        def percent=: (Integer?) -> Integer?

        def percent?: () -> bool

        def percent_changed?: () -> bool

        def percent_change: () -> [ Integer?, Integer? ]

        def percent_will_change!: () -> void

        def percent_was: () -> Integer?

        def percent_previously_changed?: () -> bool

        def percent_previous_change: () -> Array[Integer?]?

        def percent_previously_was: () -> Integer?

        def percent_before_last_save: () -> Integer?

        def percent_change_to_be_saved: () -> Array[Integer?]?

        def percent_in_database: () -> Integer?

        def saved_change_to_percent: () -> Array[Integer?]?

        def saved_change_to_percent?: () -> bool

        def will_save_change_to_percent?: () -> bool

        def restore_percent!: () -> void

        def clear_percent_change: () -> void

        def reason: () -> String?

        def reason=: (String?) -> String?

        def reason?: () -> bool

        def reason_changed?: () -> bool

        def reason_change: () -> [ String?, String? ]

        def reason_will_change!: () -> void

        def reason_was: () -> String?

        def reason_previously_changed?: () -> bool

        def reason_previous_change: () -> Array[String?]?

        def reason_previously_was: () -> String?

        def reason_before_last_save: () -> String?

        def reason_change_to_be_saved: () -> Array[String?]?

        def reason_in_database: () -> String?

        def saved_change_to_reason: () -> Array[String?]?

        def saved_change_to_reason?: () -> bool

        def will_save_change_to_reason?: () -> bool

        def restore_reason!: () -> void

        def clear_reason_change: () -> void

        def created_at: () -> ActiveSupport::TimeWithZone

        def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

        def created_at?: () -> bool

        def created_at_changed?: () -> bool

        def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

        def created_at_will_change!: () -> void

        def created_at_was: () -> ActiveSupport::TimeWithZone?

        def created_at_previously_changed?: () -> bool

        def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

        def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

        def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

        def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

        def created_at_in_database: () -> ActiveSupport::TimeWithZone?

        def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

        def saved_change_to_created_at?: () -> bool

        def will_save_change_to_created_at?: () -> bool

        def restore_created_at!: () -> void

        def clear_created_at_change: () -> void

        def updated_at: () -> ActiveSupport::TimeWithZone

        def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

        def updated_at?: () -> bool

        def updated_at_changed?: () -> bool

        def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

        def updated_at_will_change!: () -> void

        def updated_at_was: () -> ActiveSupport::TimeWithZone?

        def updated_at_previously_changed?: () -> bool

        def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

        def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

        def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

        def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

        def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

        def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

        def saved_change_to_updated_at?: () -> bool

        def will_save_change_to_updated_at?: () -> bool

        def restore_updated_at!: () -> void

        def clear_updated_at_change: () -> void
      end
      include GeneratedAttributeMethods

      def result: () -> SpeedSkydivingCompetition::Result
      def result=: (SpeedSkydivingCompetition::Result?) -> SpeedSkydivingCompetition::Result?
      def reload_result: () -> SpeedSkydivingCompetition::Result?
      def build_result: (untyped) -> SpeedSkydivingCompetition::Result
      def create_result: (untyped) -> SpeedSkydivingCompetition::Result
      def create_result!: (untyped) -> SpeedSkydivingCompetition::Result

      module GeneratedRelationMethods
      end

      class ActiveRecord_Relation < ::ActiveRecord::Relation
        include GeneratedRelationMethods
        include _ActiveRecord_Relation[SpeedSkydivingCompetition::Result::Penalty, Integer]
        include Enumerable[SpeedSkydivingCompetition::Result::Penalty]
      end

      class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
        include GeneratedRelationMethods
        include _ActiveRecord_Relation[SpeedSkydivingCompetition::Result::Penalty, Integer]
      end
    end
  end
end

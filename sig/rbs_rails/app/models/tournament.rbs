class Tournament < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Tournament, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def name: () -> String?

    def name=: (String?) -> String?

    def name?: () -> bool

    def name_changed?: () -> bool

    def name_change: () -> [ String?, String? ]

    def name_will_change!: () -> void

    def name_was: () -> String?

    def name_previously_changed?: () -> bool

    def name_previous_change: () -> Array[String?]?

    def name_previously_was: () -> String?

    def name_before_last_save: () -> String?

    def name_change_to_be_saved: () -> Array[String?]?

    def name_in_database: () -> String?

    def saved_change_to_name: () -> Array[String?]?

    def saved_change_to_name?: () -> bool

    def will_save_change_to_name?: () -> bool

    def restore_name!: () -> void

    def clear_name_change: () -> void

    def place_id: () -> Integer?

    def place_id=: (Integer?) -> Integer?

    def place_id?: () -> bool

    def place_id_changed?: () -> bool

    def place_id_change: () -> [ Integer?, Integer? ]

    def place_id_will_change!: () -> void

    def place_id_was: () -> Integer?

    def place_id_previously_changed?: () -> bool

    def place_id_previous_change: () -> Array[Integer?]?

    def place_id_previously_was: () -> Integer?

    def place_id_before_last_save: () -> Integer?

    def place_id_change_to_be_saved: () -> Array[Integer?]?

    def place_id_in_database: () -> Integer?

    def saved_change_to_place_id: () -> Array[Integer?]?

    def saved_change_to_place_id?: () -> bool

    def will_save_change_to_place_id?: () -> bool

    def restore_place_id!: () -> void

    def clear_place_id_change: () -> void

    def discipline: () -> String?

    def discipline=: (String?) -> String?

    def discipline?: () -> bool

    def discipline_changed?: () -> bool

    def discipline_change: () -> [ String?, String? ]

    def discipline_will_change!: () -> void

    def discipline_was: () -> String?

    def discipline_previously_changed?: () -> bool

    def discipline_previous_change: () -> Array[String?]?

    def discipline_previously_was: () -> String?

    def discipline_before_last_save: () -> String?

    def discipline_change_to_be_saved: () -> Array[String?]?

    def discipline_in_database: () -> String?

    def saved_change_to_discipline: () -> Array[String?]?

    def saved_change_to_discipline?: () -> bool

    def will_save_change_to_discipline?: () -> bool

    def restore_discipline!: () -> void

    def clear_discipline_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void

    def starts_at: () -> Date?

    def starts_at=: (Date?) -> Date?

    def starts_at?: () -> bool

    def starts_at_changed?: () -> bool

    def starts_at_change: () -> [ Date?, Date? ]

    def starts_at_will_change!: () -> void

    def starts_at_was: () -> Date?

    def starts_at_previously_changed?: () -> bool

    def starts_at_previous_change: () -> Array[Date?]?

    def starts_at_previously_was: () -> Date?

    def starts_at_before_last_save: () -> Date?

    def starts_at_change_to_be_saved: () -> Array[Date?]?

    def starts_at_in_database: () -> Date?

    def saved_change_to_starts_at: () -> Array[Date?]?

    def saved_change_to_starts_at?: () -> bool

    def will_save_change_to_starts_at?: () -> bool

    def restore_starts_at!: () -> void

    def clear_starts_at_change: () -> void

    def profile_id: () -> Integer?

    def profile_id=: (Integer?) -> Integer?

    def profile_id?: () -> bool

    def profile_id_changed?: () -> bool

    def profile_id_change: () -> [ Integer?, Integer? ]

    def profile_id_will_change!: () -> void

    def profile_id_was: () -> Integer?

    def profile_id_previously_changed?: () -> bool

    def profile_id_previous_change: () -> Array[Integer?]?

    def profile_id_previously_was: () -> Integer?

    def profile_id_before_last_save: () -> Integer?

    def profile_id_change_to_be_saved: () -> Array[Integer?]?

    def profile_id_in_database: () -> Integer?

    def saved_change_to_profile_id: () -> Array[Integer?]?

    def saved_change_to_profile_id?: () -> bool

    def will_save_change_to_profile_id?: () -> bool

    def restore_profile_id!: () -> void

    def clear_profile_id_change: () -> void

    def bracket_size: () -> Integer?

    def bracket_size=: (Integer?) -> Integer?

    def bracket_size?: () -> bool

    def bracket_size_changed?: () -> bool

    def bracket_size_change: () -> [ Integer?, Integer? ]

    def bracket_size_will_change!: () -> void

    def bracket_size_was: () -> Integer?

    def bracket_size_previously_changed?: () -> bool

    def bracket_size_previous_change: () -> Array[Integer?]?

    def bracket_size_previously_was: () -> Integer?

    def bracket_size_before_last_save: () -> Integer?

    def bracket_size_change_to_be_saved: () -> Array[Integer?]?

    def bracket_size_in_database: () -> Integer?

    def saved_change_to_bracket_size: () -> Array[Integer?]?

    def saved_change_to_bracket_size?: () -> bool

    def will_save_change_to_bracket_size?: () -> bool

    def restore_bracket_size!: () -> void

    def clear_bracket_size_change: () -> void

    def has_qualification: () -> bool?

    def has_qualification=: (bool?) -> bool?

    def has_qualification?: () -> bool

    def has_qualification_changed?: () -> bool

    def has_qualification_change: () -> [ bool?, bool? ]

    def has_qualification_will_change!: () -> void

    def has_qualification_was: () -> bool?

    def has_qualification_previously_changed?: () -> bool

    def has_qualification_previous_change: () -> Array[bool?]?

    def has_qualification_previously_was: () -> bool?

    def has_qualification_before_last_save: () -> bool?

    def has_qualification_change_to_be_saved: () -> Array[bool?]?

    def has_qualification_in_database: () -> bool?

    def saved_change_to_has_qualification: () -> Array[bool?]?

    def saved_change_to_has_qualification?: () -> bool

    def will_save_change_to_has_qualification?: () -> bool

    def restore_has_qualification!: () -> void

    def clear_has_qualification_change: () -> void

    def responsible_id: () -> Integer?

    def responsible_id=: (Integer?) -> Integer?

    def responsible_id?: () -> bool

    def responsible_id_changed?: () -> bool

    def responsible_id_change: () -> [ Integer?, Integer? ]

    def responsible_id_will_change!: () -> void

    def responsible_id_was: () -> Integer?

    def responsible_id_previously_changed?: () -> bool

    def responsible_id_previous_change: () -> Array[Integer?]?

    def responsible_id_previously_was: () -> Integer?

    def responsible_id_before_last_save: () -> Integer?

    def responsible_id_change_to_be_saved: () -> Array[Integer?]?

    def responsible_id_in_database: () -> Integer?

    def saved_change_to_responsible_id: () -> Array[Integer?]?

    def saved_change_to_responsible_id?: () -> bool

    def will_save_change_to_responsible_id?: () -> bool

    def restore_responsible_id!: () -> void

    def clear_responsible_id_change: () -> void

    def status: () -> String

    def status=: (String) -> String

    def status?: () -> bool

    def status_changed?: () -> bool

    def status_change: () -> [ String?, String? ]

    def status_will_change!: () -> void

    def status_was: () -> String?

    def status_previously_changed?: () -> bool

    def status_previous_change: () -> Array[String?]?

    def status_previously_was: () -> String?

    def status_before_last_save: () -> String?

    def status_change_to_be_saved: () -> Array[String?]?

    def status_in_database: () -> String?

    def saved_change_to_status: () -> Array[String?]?

    def saved_change_to_status?: () -> bool

    def will_save_change_to_status?: () -> bool

    def restore_status!: () -> void

    def clear_status_change: () -> void

    def finish_line_id: () -> Integer?

    def finish_line_id=: (Integer?) -> Integer?

    def finish_line_id?: () -> bool

    def finish_line_id_changed?: () -> bool

    def finish_line_id_change: () -> [ Integer?, Integer? ]

    def finish_line_id_will_change!: () -> void

    def finish_line_id_was: () -> Integer?

    def finish_line_id_previously_changed?: () -> bool

    def finish_line_id_previous_change: () -> Array[Integer?]?

    def finish_line_id_previously_was: () -> Integer?

    def finish_line_id_before_last_save: () -> Integer?

    def finish_line_id_change_to_be_saved: () -> Array[Integer?]?

    def finish_line_id_in_database: () -> Integer?

    def saved_change_to_finish_line_id: () -> Array[Integer?]?

    def saved_change_to_finish_line_id?: () -> bool

    def will_save_change_to_finish_line_id?: () -> bool

    def restore_finish_line_id!: () -> void

    def clear_finish_line_id_change: () -> void
  end
  include GeneratedAttributeMethods
  def organizers: () -> Organizer::ActiveRecord_Associations_CollectionProxy
  def organizers=: (Organizer::ActiveRecord_Associations_CollectionProxy | Array[Organizer]) -> (Organizer::ActiveRecord_Associations_CollectionProxy | Array[Organizer])
  def organizer_ids: () -> Array[Integer]
  def organizer_ids=: (Array[Integer]) -> Array[Integer]
  def competitors: () -> Tournament::Competitor::ActiveRecord_Associations_CollectionProxy
  def competitors=: (Tournament::Competitor::ActiveRecord_Associations_CollectionProxy | Array[Tournament::Competitor]) -> (Tournament::Competitor::ActiveRecord_Associations_CollectionProxy | Array[Tournament::Competitor])
  def competitor_ids: () -> Array[Integer]
  def competitor_ids=: (Array[Integer]) -> Array[Integer]
  def rounds: () -> Tournament::Round::ActiveRecord_Associations_CollectionProxy
  def rounds=: (Tournament::Round::ActiveRecord_Associations_CollectionProxy | Array[Tournament::Round]) -> (Tournament::Round::ActiveRecord_Associations_CollectionProxy | Array[Tournament::Round])
  def round_ids: () -> Array[Integer]
  def round_ids=: (Array[Integer]) -> Array[Integer]
  def matches: () -> Tournament::Match::ActiveRecord_Associations_CollectionProxy
  def matches=: (Tournament::Match::ActiveRecord_Associations_CollectionProxy | Array[Tournament::Match]) -> (Tournament::Match::ActiveRecord_Associations_CollectionProxy | Array[Tournament::Match])
  def match_ids: () -> Array[Integer]
  def match_ids=: (Array[Integer]) -> Array[Integer]
  def qualification_rounds: () -> QualificationRound::ActiveRecord_Associations_CollectionProxy
  def qualification_rounds=: (QualificationRound::ActiveRecord_Associations_CollectionProxy | Array[QualificationRound]) -> (QualificationRound::ActiveRecord_Associations_CollectionProxy | Array[QualificationRound])
  def qualification_round_ids: () -> Array[Integer]
  def qualification_round_ids=: (Array[Integer]) -> Array[Integer]
  def qualification_jumps: () -> QualificationJump::ActiveRecord_Associations_CollectionProxy
  def qualification_jumps=: (QualificationJump::ActiveRecord_Associations_CollectionProxy | Array[QualificationJump]) -> (QualificationJump::ActiveRecord_Associations_CollectionProxy | Array[QualificationJump])
  def qualification_jump_ids: () -> Array[Integer]
  def qualification_jump_ids=: (Array[Integer]) -> Array[Integer]
  def sponsors: () -> Sponsor::ActiveRecord_Associations_CollectionProxy
  def sponsors=: (Sponsor::ActiveRecord_Associations_CollectionProxy | Array[Sponsor]) -> (Sponsor::ActiveRecord_Associations_CollectionProxy | Array[Sponsor])
  def sponsor_ids: () -> Array[Integer]
  def sponsor_ids=: (Array[Integer]) -> Array[Integer]

  def responsible: () -> User
  def responsible=: (User?) -> User?
  def reload_responsible: () -> User?
  def build_responsible: (untyped) -> User
  def create_responsible: (untyped) -> User
  def create_responsible!: (untyped) -> User
  def place: () -> Place
  def place=: (Place?) -> Place?
  def reload_place: () -> Place?
  def build_place: (untyped) -> Place
  def create_place: (untyped) -> Place
  def create_place!: (untyped) -> Place
  def finish_line: () -> Place::FinishLine
  def finish_line=: (Place::FinishLine?) -> Place::FinishLine?
  def reload_finish_line: () -> Place::FinishLine?
  def build_finish_line: (untyped) -> Place::FinishLine
  def create_finish_line: (untyped) -> Place::FinishLine
  def create_finish_line!: (untyped) -> Place::FinishLine

  def draft!: () -> bool
  def draft?: () -> bool
  def published!: () -> bool
  def published?: () -> bool
  def finished!: () -> bool
  def finished?: () -> bool
  def surprise!: () -> bool
  def surprise?: () -> bool
  def time!: () -> bool
  def time?: () -> bool
  def distance!: () -> bool
  def distance?: () -> bool
  def speed!: () -> bool
  def speed?: () -> bool
  def distance_in_time!: () -> bool
  def distance_in_time?: () -> bool
  def time_until_intersection!: () -> bool
  def time_until_intersection?: () -> bool
  def self.draft: () -> ActiveRecord_Relation
  def self.published: () -> ActiveRecord_Relation
  def self.finished: () -> ActiveRecord_Relation
  def self.surprise: () -> ActiveRecord_Relation
  def self.time: () -> ActiveRecord_Relation
  def self.distance: () -> ActiveRecord_Relation
  def self.speed: () -> ActiveRecord_Relation
  def self.distance_in_time: () -> ActiveRecord_Relation
  def self.time_until_intersection: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def draft: () -> ActiveRecord_Relation

    def published: () -> ActiveRecord_Relation

    def finished: () -> ActiveRecord_Relation

    def surprise: () -> ActiveRecord_Relation

    def time: () -> ActiveRecord_Relation

    def distance: () -> ActiveRecord_Relation

    def speed: () -> ActiveRecord_Relation

    def distance_in_time: () -> ActiveRecord_Relation

    def time_until_intersection: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Tournament, Integer]
    include Enumerable[Tournament]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Tournament, Integer]
  end
end

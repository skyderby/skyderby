class SpeedSkydivingCompetition < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[SpeedSkydivingCompetition, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def name: () -> String?

    def name=: (String?) -> String?

    def name?: () -> bool

    def name_changed?: () -> bool

    def name_change: () -> [ String?, String? ]

    def name_will_change!: () -> void

    def name_was: () -> String?

    def name_previously_changed?: () -> bool

    def name_previous_change: () -> Array[String?]?

    def name_previously_was: () -> String?

    def name_before_last_save: () -> String?

    def name_change_to_be_saved: () -> Array[String?]?

    def name_in_database: () -> String?

    def saved_change_to_name: () -> Array[String?]?

    def saved_change_to_name?: () -> bool

    def will_save_change_to_name?: () -> bool

    def restore_name!: () -> void

    def clear_name_change: () -> void

    def starts_at: () -> Date?

    def starts_at=: (Date?) -> Date?

    def starts_at?: () -> bool

    def starts_at_changed?: () -> bool

    def starts_at_change: () -> [ Date?, Date? ]

    def starts_at_will_change!: () -> void

    def starts_at_was: () -> Date?

    def starts_at_previously_changed?: () -> bool

    def starts_at_previous_change: () -> Array[Date?]?

    def starts_at_previously_was: () -> Date?

    def starts_at_before_last_save: () -> Date?

    def starts_at_change_to_be_saved: () -> Array[Date?]?

    def starts_at_in_database: () -> Date?

    def saved_change_to_starts_at: () -> Array[Date?]?

    def saved_change_to_starts_at?: () -> bool

    def will_save_change_to_starts_at?: () -> bool

    def restore_starts_at!: () -> void

    def clear_starts_at_change: () -> void

    def status: () -> String

    def status=: (String) -> String

    def status?: () -> bool

    def status_changed?: () -> bool

    def status_change: () -> [ String?, String? ]

    def status_will_change!: () -> void

    def status_was: () -> String?

    def status_previously_changed?: () -> bool

    def status_previous_change: () -> Array[String?]?

    def status_previously_was: () -> String?

    def status_before_last_save: () -> String?

    def status_change_to_be_saved: () -> Array[String?]?

    def status_in_database: () -> String?

    def saved_change_to_status: () -> Array[String?]?

    def saved_change_to_status?: () -> bool

    def will_save_change_to_status?: () -> bool

    def restore_status!: () -> void

    def clear_status_change: () -> void

    def visibility: () -> String

    def visibility=: (String) -> String

    def visibility?: () -> bool

    def visibility_changed?: () -> bool

    def visibility_change: () -> [ String?, String? ]

    def visibility_will_change!: () -> void

    def visibility_was: () -> String?

    def visibility_previously_changed?: () -> bool

    def visibility_previous_change: () -> Array[String?]?

    def visibility_previously_was: () -> String?

    def visibility_before_last_save: () -> String?

    def visibility_change_to_be_saved: () -> Array[String?]?

    def visibility_in_database: () -> String?

    def saved_change_to_visibility: () -> Array[String?]?

    def saved_change_to_visibility?: () -> bool

    def will_save_change_to_visibility?: () -> bool

    def restore_visibility!: () -> void

    def clear_visibility_change: () -> void

    def is_official: () -> bool

    def is_official=: (bool) -> bool

    def is_official?: () -> bool

    def is_official_changed?: () -> bool

    def is_official_change: () -> [ bool?, bool? ]

    def is_official_will_change!: () -> void

    def is_official_was: () -> bool?

    def is_official_previously_changed?: () -> bool

    def is_official_previous_change: () -> Array[bool?]?

    def is_official_previously_was: () -> bool?

    def is_official_before_last_save: () -> bool?

    def is_official_change_to_be_saved: () -> Array[bool?]?

    def is_official_in_database: () -> bool?

    def saved_change_to_is_official: () -> Array[bool?]?

    def saved_change_to_is_official?: () -> bool

    def will_save_change_to_is_official?: () -> bool

    def restore_is_official!: () -> void

    def clear_is_official_change: () -> void

    def use_teams: () -> bool

    def use_teams=: (bool) -> bool

    def use_teams?: () -> bool

    def use_teams_changed?: () -> bool

    def use_teams_change: () -> [ bool?, bool? ]

    def use_teams_will_change!: () -> void

    def use_teams_was: () -> bool?

    def use_teams_previously_changed?: () -> bool

    def use_teams_previous_change: () -> Array[bool?]?

    def use_teams_previously_was: () -> bool?

    def use_teams_before_last_save: () -> bool?

    def use_teams_change_to_be_saved: () -> Array[bool?]?

    def use_teams_in_database: () -> bool?

    def saved_change_to_use_teams: () -> Array[bool?]?

    def saved_change_to_use_teams?: () -> bool

    def will_save_change_to_use_teams?: () -> bool

    def restore_use_teams!: () -> void

    def clear_use_teams_change: () -> void

    def responsible_id: () -> Integer?

    def responsible_id=: (Integer?) -> Integer?

    def responsible_id?: () -> bool

    def responsible_id_changed?: () -> bool

    def responsible_id_change: () -> [ Integer?, Integer? ]

    def responsible_id_will_change!: () -> void

    def responsible_id_was: () -> Integer?

    def responsible_id_previously_changed?: () -> bool

    def responsible_id_previous_change: () -> Array[Integer?]?

    def responsible_id_previously_was: () -> Integer?

    def responsible_id_before_last_save: () -> Integer?

    def responsible_id_change_to_be_saved: () -> Array[Integer?]?

    def responsible_id_in_database: () -> Integer?

    def saved_change_to_responsible_id: () -> Array[Integer?]?

    def saved_change_to_responsible_id?: () -> bool

    def will_save_change_to_responsible_id?: () -> bool

    def restore_responsible_id!: () -> void

    def clear_responsible_id_change: () -> void

    def place_id: () -> Integer?

    def place_id=: (Integer?) -> Integer?

    def place_id?: () -> bool

    def place_id_changed?: () -> bool

    def place_id_change: () -> [ Integer?, Integer? ]

    def place_id_will_change!: () -> void

    def place_id_was: () -> Integer?

    def place_id_previously_changed?: () -> bool

    def place_id_previous_change: () -> Array[Integer?]?

    def place_id_previously_was: () -> Integer?

    def place_id_before_last_save: () -> Integer?

    def place_id_change_to_be_saved: () -> Array[Integer?]?

    def place_id_in_database: () -> Integer?

    def saved_change_to_place_id: () -> Array[Integer?]?

    def saved_change_to_place_id?: () -> bool

    def will_save_change_to_place_id?: () -> bool

    def restore_place_id!: () -> void

    def clear_place_id_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods
  def categories: () -> SpeedSkydivingCompetition::Category::ActiveRecord_Associations_CollectionProxy
  def categories=: (SpeedSkydivingCompetition::Category::ActiveRecord_Associations_CollectionProxy | Array[SpeedSkydivingCompetition::Category]) -> (SpeedSkydivingCompetition::Category::ActiveRecord_Associations_CollectionProxy | Array[SpeedSkydivingCompetition::Category])
  def category_ids: () -> Array[Integer]
  def category_ids=: (Array[Integer]) -> Array[Integer]
  def rounds: () -> SpeedSkydivingCompetition::Round::ActiveRecord_Associations_CollectionProxy
  def rounds=: (SpeedSkydivingCompetition::Round::ActiveRecord_Associations_CollectionProxy | Array[SpeedSkydivingCompetition::Round]) -> (SpeedSkydivingCompetition::Round::ActiveRecord_Associations_CollectionProxy | Array[SpeedSkydivingCompetition::Round])
  def round_ids: () -> Array[Integer]
  def round_ids=: (Array[Integer]) -> Array[Integer]
  def competitors: () -> SpeedSkydivingCompetition::Competitor::ActiveRecord_Associations_CollectionProxy
  def competitors=: (SpeedSkydivingCompetition::Competitor::ActiveRecord_Associations_CollectionProxy | Array[SpeedSkydivingCompetition::Competitor]) -> (SpeedSkydivingCompetition::Competitor::ActiveRecord_Associations_CollectionProxy | Array[SpeedSkydivingCompetition::Competitor])
  def competitor_ids: () -> Array[Integer]
  def competitor_ids=: (Array[Integer]) -> Array[Integer]
  def results: () -> SpeedSkydivingCompetition::Result::ActiveRecord_Associations_CollectionProxy
  def results=: (SpeedSkydivingCompetition::Result::ActiveRecord_Associations_CollectionProxy | Array[SpeedSkydivingCompetition::Result]) -> (SpeedSkydivingCompetition::Result::ActiveRecord_Associations_CollectionProxy | Array[SpeedSkydivingCompetition::Result])
  def result_ids: () -> Array[Integer]
  def result_ids=: (Array[Integer]) -> Array[Integer]
  def teams: () -> SpeedSkydivingCompetition::Team::ActiveRecord_Associations_CollectionProxy
  def teams=: (SpeedSkydivingCompetition::Team::ActiveRecord_Associations_CollectionProxy | Array[SpeedSkydivingCompetition::Team]) -> (SpeedSkydivingCompetition::Team::ActiveRecord_Associations_CollectionProxy | Array[SpeedSkydivingCompetition::Team])
  def team_ids: () -> Array[Integer]
  def team_ids=: (Array[Integer]) -> Array[Integer]
  def tracks: () -> Track::ActiveRecord_Associations_CollectionProxy
  def tracks=: (Track::ActiveRecord_Associations_CollectionProxy | Array[Track]) -> (Track::ActiveRecord_Associations_CollectionProxy | Array[Track])
  def track_ids: () -> Array[Integer]
  def track_ids=: (Array[Integer]) -> Array[Integer]

  def responsible: () -> User
  def responsible=: (User?) -> User?
  def reload_responsible: () -> User?
  def build_responsible: (untyped) -> User
  def create_responsible: (untyped) -> User
  def create_responsible!: (untyped) -> User
  def place: () -> Place
  def place=: (Place?) -> Place?
  def reload_place: () -> Place?
  def build_place: (untyped) -> Place
  def create_place: (untyped) -> Place
  def create_place!: (untyped) -> Place

  def draft!: () -> bool
  def draft?: () -> bool
  def published!: () -> bool
  def published?: () -> bool
  def finished!: () -> bool
  def finished?: () -> bool
  def surprise!: () -> bool
  def surprise?: () -> bool
  def public_event!: () -> bool
  def public_event?: () -> bool
  def unlisted_event!: () -> bool
  def unlisted_event?: () -> bool
  def private_event!: () -> bool
  def private_event?: () -> bool
  def self.draft: () -> ActiveRecord_Relation
  def self.published: () -> ActiveRecord_Relation
  def self.finished: () -> ActiveRecord_Relation
  def self.surprise: () -> ActiveRecord_Relation
  def self.public_event: () -> ActiveRecord_Relation
  def self.unlisted_event: () -> ActiveRecord_Relation
  def self.private_event: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def draft: () -> ActiveRecord_Relation

    def published: () -> ActiveRecord_Relation

    def finished: () -> ActiveRecord_Relation

    def surprise: () -> ActiveRecord_Relation

    def public_event: () -> ActiveRecord_Relation

    def unlisted_event: () -> ActiveRecord_Relation

    def private_event: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[SpeedSkydivingCompetition, Integer]
    include Enumerable[SpeedSkydivingCompetition]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[SpeedSkydivingCompetition, Integer]
  end
end

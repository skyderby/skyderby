- provide :title, @event.name
- can_manage = policy(@event).update?

.container-fluid.top-buffer#event

  .content-block
    .row
      #event-header.col-md-8.col-md-offset-2.text-center
        = render 'header'

      .col-md-2
        - if can_manage
          .pull-right= edit_event_link(@event)

    .row.event__scoreboard-actions
      .col-md-6.col-sm-6
        - if can_manage && !@event.finished?
          = new_section_link(@event)
          = new_competitor_link(@event)

          - if @event.hungary_boogie?
            = button_to event_rounds_path(@event),
                        method: :post,
                        remote: true,
                        params: {'round[discipline]' => :distance}.merge(display_event_params),
                        class: 'btn btn-default' do
              %i.fa.fa-plus.text-muted
              = t('activerecord.models.event/round')

          -else
            .btn-group
              %button.btn.btn-default{'data-toggle' => 'dropdown'}
                %i.fa.fa-plus.text-muted
                = t('activerecord.models.event/round')
                %i.fa.fa-caret-down
              %ul.dropdown-menu.dropdown-menu-right{role: 'menu'}
                %li= add_round_button(@event, :distance)
                %li= add_round_button(@event, :speed)
                %li= add_round_button(@event, :time)

      .col-md-6.col-sm-6
        .pull-right
          %button{class: ['btn', 'btn-default', ('active' if @event.active? && !can_manage)],
                  'data-controller': 'events--autoupdate',
                  'data-action': 'click->events--autoupdate#trigger_state',
                  'data-event-id': @event.id}
            = link_to '', event_scoreboard_path(event_id: @event.id),
                      class: 'hide',
                      remote: true,
                      'data-params': display_event_params.to_param,
                      'data-target': 'events--autoupdate.link',
                      'data-action': 'ajax:before->events--autoupdate#update_start ajax:complete->events--autoupdate#update_finish'

            %i.fa.fa-sync.text-muted{'data-target': 'events--autoupdate.indicator'}
            Autoupdate

          - if can_manage
            .btn-group.event-status-group
              %button.btn.btn-default.event-status-button{'data-toggle': 'dropdown'}
                = t('activerecord.attributes.event.status') + ': ' + t('event_status.' + @event.status)
                %i.fa.fa-caret-down
              %ul.dropdown-menu.dropdown-menu-right{role: 'menu'}
                - Event.statuses.each do |status, _index|
                  %li{class: ('active' if @event.status == status)}
                    = change_event_status_button(@event, status)

          .btn-group
            %button.btn.btn-default.dropdown-toggle{type: 'button', 'data-toggle': 'dropdown'}
              %i.fas.fa-cog
            %ul.dropdown-menu.dropdown-menu-right{role: 'menu'}
              %li.dropdown-header
                Penalties
              - omit_penalties = display_event_params[:omit_penalties] == 'true'
              %li{class: ('active' if !omit_penalties)}
                = link_to 'Show with penalties', display_event_params.except(:omit_penalties), rel: 'nofollow'
              %li{class: ('active' if omit_penalties)}
                = link_to 'Omit penalties', display_event_params.merge(omit_penalties: 'true'), rel: 'nofollow'
              - if can_manage
                %li.divider{role: 'separator'}
                %li
                  = link_to 'Export to Excel', event_scoreboard_path(@event, format: :xlsx), rel: 'nofollow'

    - if !@event.surprise? || can_manage
      = render @scoreboard, can_manage: can_manage
    - else
      %h1.text-muted.text-center
        ðŸ™… Let it be Surprise

    - if @scoreboard.wind_cancellation
      .row
        .col-md-12#event-wind-cancellation-caption
          %span
            = t('events.show.wind_cancellation_enabled')
          %span
            = t('events.show.results_showing')
            - if (@scoreboard.display_raw_results?)
              = link_to t('events.show.results_adjusted_caption'),
                        display_event_params.merge(display_raw_results: false),
                        remote: true
              \/
              %b= t('events.show.results_not_adjusted_caption')
            - else
              %b= t('events.show.results_adjusted_caption')
              \/
              = link_to t('events.show.results_not_adjusted_caption'),
                        display_event_params.merge(display_raw_results: true),
                        remote: true

    .row
      .col-md-12
        = render 'organizers/list',
                 organizable: @event,
                 editable: (can_manage && !@event.finished?)

    .row.top-buffer
      = render 'sponsors/list',
               sponsorable: @event,
               editable: (can_manage && !@event.finished?)

- content_for :page_js do
  %script
    = render partial: 'show_controls', formats: [:js]
